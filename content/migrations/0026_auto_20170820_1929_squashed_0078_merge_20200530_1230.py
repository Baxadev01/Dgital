# Generated by Django 3.0.6 on 2020-05-30 12:38

import content.models
from django.conf import settings
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.utils.timezone
import markdownx.models
import uuid
from uuid import uuid4


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# content.migrations.0065_article_main_image  --> FIXED
# content.migrations.0077_article_uid         --> FIXED

def migration_0065_article_main_image__set_my_defaults(apps, schema_editor):
    Article = apps.get_model('content', 'Article')

    for article in Article.objects.filter(uid__isnull=True).only('id').iterator():
        # на всякий случай проверим
        article.uid = str(uuid4().hex)
        article.save()


def migration_0077_article_uid__create_uuid(apps, schema_editor):
    Article = apps.get_model('content', 'Article')
    for a in Article.objects.all():
        a.uid = uuid.uuid4()
        a.save()


class Migration(migrations.Migration):

    replaces = [
        ('content', '0026_auto_20170820_1929'),
        ('content', '0027_auto_20170820_2158'),
        ('content', '0028_auto_20170820_2207'),
        ('content', '0029_auto_20170820_2217'),
        ('content', '0030_auto_20170820_2233'),
        ('content', '0031_tgpost_chat'),
        ('content', '0032_auto_20170826_1531'),
        ('content', '0033_auto_20170826_1616'),
        ('content', '0034_auto_20170826_1742'),
        ('content', '0035_auto_20170922_0926'),
        ('content', '0036_auto_20170922_1052'),
        ('content', '0037_auto_20170922_1103'),
        ('content', '0038_auto_20170922_1105'),
        ('content', '0039_auto_20171116_0910'),
        ('content', '0040_remove_tgchat_waves'),
        ('content', '0041_remove_tgpost_wave'),
        ('content', '0042_auto_20171129_0257'),
        ('content', '0043_auto_20171228_0051'),
        ('content', '0044_auto_20171228_0213'),
        ('content', '0045_chatquestion'),
        ('content', '0046_auto_20171228_0350'),
        ('content', '0047_auto_20171228_1220'),
        ('content', '0048_tgchat_is_moderated'),
        ('content', '0049_auto_20171228_1249'),
        ('content', '0050_admissiontest_admissiontestquestion'),
        ('content', '0051_auto_20180108_1046'),
        ('content', '0052_auto_20180108_1120'),
        ('content', '0053_auto_20180111_1323'),
        ('content', '0054_auto_20180111_1340'),
        ('content', '0055_auto_20180113_0510'),
        ('content', '0056_dialogue_is_markdown'),
        ('content', '0057_auto_20180121_2248'),
        ('content', '0058_auto_20180219_1237'),
        ('content', '0059_auto_20180318_1623'),
        ('content', '0060_auto_20180318_2232'),
        ('content', '0061_auto_20180330_0137'),
        ('content', '0062_article_has_video'),
        ('content', '0063_analysistemplate'),
        ('content', '0064_meeting_status'),
        ('content', '0065_article_main_image'),
        ('content', '0066_auto_20180907_0826'),
        ('content', '0067_auto_20180907_0829'),
        ('content', '0068_auto_20181102_0848'),
        ('content', '0069_auto_20181102_0852'),
        ('content', '0070_auto_20181221_0646'),
        ('content', '0071_auto_20190202_0150'),
        ('content', '0072_auto_20190321_1643'),
        ('content', '0073_tgnotificationtemplate_system_code'),
        ('content', '0074_auto_20191002_1239'),
        ('content', '0075_analysistemplate_adjust_carb_sub_breakfast'),
        ('content', '0076_auto_20200122_0621'),
        ('content', '0077_auto_20200321_1033'),
        ('content', '0076_remove_article_uid'),
        ('content', '0077_article_uid'),
        ('content', '0078_merge_20200530_1230')]

    dependencies = [
        ('content', '0025_tgchat'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='tgchat',
            name='chat_type',
            field=models.CharField(blank=True, choices=[(b'CHAT', b'Chat'), (b'CHANNEL', b'Channel')], default=b'CHAT', max_length=20),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='title',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='waves',
            field=models.ManyToManyField(to='srbc.Wave'),
        ),
        migrations.CreateModel(
            name='TGChatParticipant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[(b'ALLOWED', b'Allowed'), (b'JOINED', b'Joined'), (b'LEFT', b'Left'), (b'BANNED', b'Banned')], max_length=50)),
                ('status_changed', models.DateTimeField(auto_now=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='content.TGChat')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='tgchat',
            name='members',
            field=models.ManyToManyField(related_name='chats', through='content.TGChatParticipant', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='end_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='tgchat',
            name='tg_id',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='tgchat',
            name='tg_slug',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.RenameField(
            model_name='tgpost',
            old_name='channel_id',
            new_name='tg_chat_id',
        ),
        migrations.AddField(
            model_name='tgpost',
            name='channel',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.TGChat'),
        ),
        migrations.RemoveField(
            model_name='tgpost',
            name='tg_chat_id',
        ),
        migrations.AlterField(
            model_name='tgchatparticipant',
            name='chat',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership', to='content.TGChat'),
        ),
        migrations.AlterField(
            model_name='tgchatparticipant',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='membership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgchatparticipant',
            name='status',
            field=models.CharField(blank=True, choices=[(b'ALLOWED', b'Allowed'), (b'JOINED', b'Joined'), (b'LEFT', b'Left'), (b'BANNED', b'Banned')], default=b'ALLOWED', max_length=50),
        ),
        migrations.CreateModel(
            name='Dialogue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_created=True)),
                ('tg_user_id', models.IntegerField(blank=True, null=True)),
                ('text', models.TextField()),
                ('is_incoming', models.BooleanField()),
                ('tg_message_id', models.IntegerField(blank=True, null=True)),
                ('answered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dialogue_answers', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dialogue_messages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='dialogue',
            index=models.Index(fields=['created_at'], name='content_dia_created_312f89_idx'),
        ),
        migrations.AddIndex(
            model_name='dialogue',
            index=models.Index(fields=['answered_by'], name='content_dia_answere_87f152_idx'),
        ),
        migrations.AddIndex(
            model_name='dialogue',
            index=models.Index(fields=['user'], name='content_dia_user_id_6c72e0_idx'),
        ),
        migrations.AddIndex(
            model_name='dialogue',
            index=models.Index(fields=['tg_user_id'], name='content_dia_tg_user_e4454f_idx'),
        ),
        migrations.AddIndex(
            model_name='dialogue',
            index=models.Index(fields=['is_incoming'], name='content_dia_is_inco_3d38ff_idx'),
        ),
        migrations.AlterField(
            model_name='dialogue',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.RenameField(
            model_name='tgchat',
            old_name='title',
            new_name='code',
        ),
        migrations.AddField(
            model_name='tgchat',
            name='title',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='code',
            field=models.CharField(max_length=6),
        ),
        migrations.AddField(
            model_name='tgchat',
            name='is_main',
            field=models.BooleanField(default=True),
        ),
        migrations.RemoveField(
            model_name='tgchat',
            name='waves',
        ),
        migrations.RemoveField(
            model_name='tgpost',
            name='wave',
        ),
        migrations.AddField(
            model_name='tgchat',
            name='next_chat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.TGChat'),
        ),
        migrations.AlterField(
            model_name='tgchatparticipant',
            name='status',
            field=models.CharField(blank=True, choices=[(b'ALLOWED', b'Allowed'), (b'JOINED', b'Joined'), (b'LEFT', b'Left'), (b'RESTRICTED', b'Restricted'), (b'BANNED', b'Banned')], default=b'ALLOWED', max_length=50),
        ),
        migrations.AlterField(
            model_name='tgchatparticipant',
            name='status',
            field=models.CharField(blank=True, choices=[(b'ALLOWED', b'Allowed'), (b'JOINED', b'Joined'), (b'LEFT', b'Left'), (b'RESTRICTED', b'Restricted'), (b'UNRESTRICTED', b'Unrestricted'), (b'BANNED', b'Banned')], default=b'ALLOWED', max_length=50),
        ),
        migrations.CreateModel(
            name='ChatQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_id', models.BigIntegerField()),
                ('shortcut', models.CharField(blank=True, max_length=4, null=True)),
                ('question_time', models.DateTimeField()),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('question_text', models.TextField(blank=True)),
                ('category', models.CharField(choices=[(b'GENERAL', '#вопрос'), (b'IG', '#сменаника'), (b'MEETING', '#вопросыкмитингу'), (b'DOC', '#док')], max_length=50)),
                ('is_answered', models.BooleanField(default=False)),
                ('answer_text', models.TextField(blank=True)),
                ('answered_time', models.DateTimeField(blank=True, null=True)),
                ('answered_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_questions_replies_by', to=settings.AUTH_USER_MODEL)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_questions_by', to=settings.AUTH_USER_MODEL)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_questions', to='content.TGChat')),
            ],
        ),
        migrations.AddIndex(
            model_name='chatquestion',
            index=models.Index(fields=['category'], name='content_cha_categor_e47ee7_idx'),
        ),
        migrations.AddIndex(
            model_name='chatquestion',
            index=models.Index(fields=['shortcut'], name='content_cha_shortcu_648830_idx'),
        ),
        migrations.AddIndex(
            model_name='chatquestion',
            index=models.Index(fields=['is_answered'], name='content_cha_is_answ_0af3fc_idx'),
        ),
        migrations.AddIndex(
            model_name='chatquestion',
            index=models.Index(fields=['chat'], name='content_cha_chat_id_89519c_idx'),
        ),
        migrations.AddIndex(
            model_name='chatquestion',
            index=models.Index(fields=['message_id'], name='content_cha_message_cb24cd_idx'),
        ),
        migrations.AlterField(
            model_name='chatquestion',
            name='answered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='chat_questions_replies_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='tgchat',
            name='is_moderated',
            field=models.BooleanField(default=True),
        ),
        migrations.AddIndex(
            model_name='tgchat',
            index=models.Index(fields=['code'], name='content_tgc_code_8fe06f_idx'),
        ),
        migrations.AddIndex(
            model_name='tgchat',
            index=models.Index(fields=['tg_id'], name='content_tgc_tg_id_12fe51_idx'),
        ),
        migrations.AddIndex(
            model_name='tgchat',
            index=models.Index(fields=['is_active'], name='content_tgc_is_acti_f708a5_idx'),
        ),
        migrations.AddIndex(
            model_name='tgchat',
            index=models.Index(fields=['is_main'], name='content_tgc_is_main_79471d_idx'),
        ),
        migrations.AddIndex(
            model_name='tgchat',
            index=models.Index(fields=['chat_type'], name='content_tgc_chat_ty_9bfb91_idx'),
        ),
        migrations.CreateModel(
            name='AdmissionTestQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', markdownx.models.MarkdownxField()),
                ('is_active', models.BooleanField(default=False)),
                ('answer_ok', models.BooleanField(default=False, verbose_name='Соответствует методичке')),
                ('answer_sweet', models.BooleanField(default=False, verbose_name='Сладкое натощак')),
                ('answer_interval', models.BooleanField(default=False, verbose_name='Нарушены интервалы')),
                ('answer_protein', models.BooleanField(default=False, verbose_name='Недостаток белка')),
                ('answer_carb', models.BooleanField(default=False, verbose_name='Неверное количество углеводов')),
                ('answer_fat', models.BooleanField(default=False, verbose_name='Превышение жирности')),
                ('answer_weight', models.BooleanField(default=False, verbose_name='Неверные навески')),
            ],
        ),
        migrations.CreateModel(
            name='UserAdmissionTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[(b'NOT_STARTED', 'Не дошел'), (b'IN_PROGRESS', 'В процессе'), (b'DONE', 'Завершил'), (b'PASSED', 'Проверено, всё ок'), (b'FAILED', 'Проверено, завалил')], default=b'NOT_STARTED', max_length=100)),
                ('question_asked', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='admission_test', to=settings.AUTH_USER_MODEL)),
                ('recommendation_info', models.TextField(blank=True, null=True)),
                ('completed_date', models.DateTimeField(blank=True, null=True)),
                ('reviewed_date', models.DateTimeField(blank=True, null=True)),
                ('started_date', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='UserAdmissionTestQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_num', models.SmallIntegerField()),
                ('is_answered', models.BooleanField(default=False)),
                ('text', markdownx.models.MarkdownxField()),
                ('answer_ok', models.BooleanField(default=False, verbose_name='Соответствует методичке')),
                ('answer_ok_comment', models.TextField(blank=True, null=True)),
                ('answer_sweet', models.BooleanField(default=False, verbose_name='Сладкое натощак')),
                ('answer_sweet_comment', models.TextField(blank=True, null=True)),
                ('answer_interval', models.BooleanField(default=False, verbose_name='Нарушены интервалы')),
                ('answer_interval_comment', models.TextField(blank=True, null=True)),
                ('answer_protein', models.BooleanField(default=False, verbose_name='Недостаток белка')),
                ('answer_protein_comment', models.TextField(blank=True, null=True)),
                ('answer_carb', models.BooleanField(default=False, verbose_name='Неверное количество углеводов')),
                ('answer_carb_comment', models.TextField(blank=True, null=True)),
                ('answer_fat', models.BooleanField(default=False, verbose_name='Превышение жирности')),
                ('answer_fat_comment', models.TextField(blank=True, null=True)),
                ('answer_weight', models.BooleanField(default=False, verbose_name='Неверные навески')),
                ('answer_weight_comment', models.TextField(blank=True, null=True)),
                ('admission_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='content.UserAdmissionTest')),
                ('source_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_usage', to='content.AdmissionTestQuestion')),
            ],
            options={
                'ordering': ['admission_test', 'question_num'],
            },
        ),
        migrations.AddIndex(
            model_name='useradmissiontest',
            index=models.Index(fields=['user'], name='content_use_user_id_6f3f8d_idx'),
        ),
        migrations.AddIndex(
            model_name='useradmissiontest',
            index=models.Index(fields=['status'], name='content_use_status_11e166_idx'),
        ),
        migrations.AddIndex(
            model_name='useradmissiontestquestion',
            index=models.Index(fields=['is_answered'], name='content_use_is_answ_2bb87f_idx'),
        ),
        migrations.AddIndex(
            model_name='useradmissiontestquestion',
            index=models.Index(fields=['admission_test'], name='content_use_admissi_6e1d11_idx'),
        ),
        migrations.AddIndex(
            model_name='useradmissiontestquestion',
            index=models.Index(fields=['source_question'], name='content_use_source__e421eb_idx'),
        ),
        migrations.AlterField(
            model_name='useradmissiontest',
            name='recommendation_info',
            field=models.TextField(blank=True, null=True, verbose_name='Информация о рекоммендателе'),
        ),
        migrations.AlterField(
            model_name='useradmissiontest',
            name='status',
            field=models.CharField(blank=True, choices=[(b'NOT_STARTED', 'Не дошел'), (b'IN_PROGRESS', 'В процессе'), (b'DONE', 'Завершил'), (b'PASSED', 'Проверено, всё ок'), (b'FAILED', 'Проверено, завалил'), (b'REJECTED', 'Отказано'), (b'ACCEPTED', 'Принят')], default=b'NOT_STARTED', max_length=100),
        ),
        migrations.AddField(
            model_name='dialogue',
            name='is_markdown',
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='message_type',
            field=models.CharField(choices=[(b'QUESTION', 'Вопрос'), (b'FEEDBACK', 'Отзыв'), (b'MEAL', 'Рацион'), (b'FORMULA', 'Формула')], max_length=100),
        ),
        migrations.AlterField(
            model_name='chatquestion',
            name='category',
            field=models.CharField(choices=[(b'GENERAL', '#вопрос'), (b'IG', '#сменаника'), (b'MEETING', '#вопросыкмитингу'), (b'FEEDBACK', '#отзыв'), (b'MEAL', '#рацион'), (b'DOC', '#док')], max_length=50),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterModelTable(
                    name='AdmissionTestQuestion',
                    table='crm_admissiontestquestion',
                ),
                migrations.AlterModelTable(
                    name='UserAdmissionTest',
                    table='crm_useradmissiontest',
                ),
                migrations.AlterModelTable(
                    name='UserAdmissionTestQuestion',
                    table='crm_useradmissiontestquestion',
                ),
            ],
            state_operations=[
                migrations.DeleteModel(
                    name='AdmissionTestQuestion',
                ),
                migrations.DeleteModel(
                    name='UserAdmissionTest',
                ),
                migrations.DeleteModel(
                    name='UserAdmissionTestQuestion',
                ),
            ],
        ),
        migrations.AlterModelOptions(
            name='article',
            options={'verbose_name': 'статья', 'verbose_name_plural': 'статьи'},
        ),
        migrations.AlterModelOptions(
            name='basics',
            options={'verbose_name': 'азы', 'verbose_name_plural': 'азы'},
        ),
        migrations.AlterModelOptions(
            name='chatquestion',
            options={'verbose_name': 'вопрос в чате', 'verbose_name_plural': 'вопросы в чатах'},
        ),
        migrations.AlterModelOptions(
            name='dialogue',
            options={'verbose_name': 'диалог', 'verbose_name_plural': 'диалоги'},
        ),
        migrations.AlterModelOptions(
            name='meeting',
            options={'verbose_name': 'запись митинга', 'verbose_name_plural': 'записи митингов'},
        ),
        migrations.AlterModelOptions(
            name='picture',
            options={'verbose_name': 'изображение', 'verbose_name_plural': 'изображения'},
        ),
        migrations.AlterModelOptions(
            name='recipe',
            options={'verbose_name': 'рецепт', 'verbose_name_plural': 'рецепты'},
        ),
        migrations.AlterModelOptions(
            name='tgchat',
            options={'verbose_name': 'чат Telegram', 'verbose_name_plural': 'чаты Telegram'},
        ),
        migrations.AlterModelOptions(
            name='tgchatparticipant',
            options={'verbose_name': 'участник чата', 'verbose_name_plural': 'участники чатов'},
        ),
        migrations.AlterModelOptions(
            name='tgmessage',
            options={'verbose_name': 'сообщение чатботу', 'verbose_name_plural': 'сообщения чатботу'},
        ),
        migrations.AlterModelOptions(
            name='tgpost',
            options={'verbose_name': 'сообщение в канале', 'verbose_name_plural': 'сообщения в канале'},
        ),
        migrations.AddIndex(
            model_name='tgchatparticipant',
            index=models.Index(fields=['status'], name='content_tgc_status_5f7026_idx'),
        ),
        migrations.AddIndex(
            model_name='tgchatparticipant',
            index=models.Index(fields=['user'], name='content_tgc_user_id_2b0a23_idx'),
        ),
        migrations.AddIndex(
            model_name='tgchatparticipant',
            index=models.Index(fields=['chat'], name='content_tgc_chat_id_44b118_idx'),
        ),
        migrations.AlterField(
            model_name='meeting',
            name='type',
            field=models.CharField(choices=[(b'REGULAR', 'Большой митинг'), (b'NEWBY', 'Новичковый митинг')], default=b'REGULAR', max_length=100),
        ),
        migrations.AddField(
            model_name='article',
            name='has_video',
            field=models.BooleanField(default=False, verbose_name='Есть видео'),
        ),
        migrations.CreateModel(
            name='AnalysisTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('text', markdownx.models.MarkdownxField()),
                ('is_visible', models.BooleanField(default=True)),
                ('display_mode', models.CharField(choices=[(b'default', b'Default'), (b'success', b'Success'), (b'info', b'Info'), (b'primary', b'Primary'), (b'warning', b'Warning'), (b'danger', b'Danger')], default=b'default', max_length=50)),
                ('order_num', models.IntegerField(blank=True, default=99)),
            ],
            options={
                'ordering': ['order_num'],
                'verbose_name': 'шаблон анализа',
                'verbose_name_plural': 'шаблоны анализа',
            },
        ),
        migrations.AddField(
            model_name='meeting',
            name='status',
            field=models.CharField(choices=[(b'PENDING', b'Pending'), (b'UPLOADED', b'Uploaded'), (b'PROCESSING', b'Processing'), (b'READY', b'Ready for publication'), (b'PUBLISHED', b'Published'), (b'ERROR', b'Error')], default=b'PENDING', max_length=50),
        ),
        migrations.AddField(
            model_name='article',
            name='main_image',
            field=models.ImageField(blank=True, null=True, upload_to=content.models.utils.picture_upload_to),
        ),
        migrations.AddField(
            model_name='article',
            name='uid',
            field=models.CharField(blank=True, default=content.models.utils.generate_uuid, max_length=32),
        ),
        migrations.RunPython(
            code=migration_0065_article_main_image__set_my_defaults,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='article',
            name='main_image',
            field=models.ImageField(blank=True, null=True, upload_to=content.models.utils.picture_upload_to, verbose_name='Заглавное изображение'),
        ),
        migrations.AlterField(
            model_name='chatquestion',
            name='shortcut',
            field=models.CharField(blank=True, max_length=6, null=True),
        ),
        migrations.AddField(
            model_name='meeting',
            name='title',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='meeting',
            name='date',
            field=models.DateField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='meeting',
            name='delay_days',
            field=models.IntegerField(blank=True, default=56),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='add_fat',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='adjust_calories',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='adjust_carb_bread_late',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='adjust_carb_bread_min',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='adjust_carb_carb_vegs',
            field=models.NullBooleanField(),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='adjust_fruits',
            field=models.CharField(blank=True, choices=[(b'NO', 'без дополнительных ограничений'), (b'RESTRICT', 'ограничение фруктов'), (b'EXCLUDE', 'замена фруктов')], max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='adjust_protein',
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name='TGNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('fingerprint', models.CharField(max_length=64)),
                ('status', models.CharField(choices=[(b'PENDING', 'Pending'), (b'SENT', 'Sent'), (b'ERROR', 'Error')], default=b'PENDING', max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, default=b'', null=True)),
                ('sent_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='content.TGMessage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tg_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TGNotificationTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('text', models.TextField()),
                ('is_visible', models.BooleanField(default=True)),
                ('display_mode', models.CharField(choices=[(b'default', b'Default'), (b'success', b'Success'), (b'info', b'Info'), (b'primary', b'Primary'), (b'warning', b'Warning'), (b'danger', b'Danger')], default=b'default', max_length=50)),
                ('order_num', models.IntegerField(blank=True, default=99)),
            ],
            options={
                'ordering': ['order_num'],
            },
        ),
        migrations.AddIndex(
            model_name='tgnotification',
            index=models.Index(fields=['status'], name='content_tgn_status_181e4a_idx'),
        ),
        migrations.AddIndex(
            model_name='tgnotification',
            index=models.Index(fields=['user'], name='content_tgn_user_id_e5415e_idx'),
        ),
        migrations.AddIndex(
            model_name='tgnotification',
            index=models.Index(fields=['fingerprint'], name='content_tgn_fingerp_0d3f74_idx'),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='status',
            field=models.CharField(choices=[(b'NEW', 'Новый'), (b'REJECTED', 'Отклонён'), (b'CANCELED', 'Отменён'), (b'ANSWERED', 'Отвечен'), (b'POSTPONED', 'Отложен')], default=b'NEW', max_length=20),
        ),
        migrations.AddField(
            model_name='tgnotificationtemplate',
            name='system_code',
            field=models.CharField(blank=True, max_length=32, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='system_code',
            field=models.CharField(blank=True, default=None, max_length=255, null=True, unique=True),
        ),
        migrations.AddIndex(
            model_name='analysistemplate',
            index=models.Index(fields=['is_visible'], name='content_ana_is_visi_74552c_idx'),
        ),
        migrations.AddIndex(
            model_name='analysistemplate',
            index=models.Index(fields=['order_num'], name='content_ana_order_n_d61eb8_idx'),
        ),
        migrations.AddIndex(
            model_name='analysistemplate',
            index=models.Index(fields=['system_code'], name='content_ana_system__62f13f_idx'),
        ),
        migrations.AddField(
            model_name='analysistemplate',
            name='adjust_carb_sub_breakfast',
            field=models.NullBooleanField(),
        ),
        migrations.AlterField(
            model_name='chatquestion',
            name='answered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chat_questions_replies_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='chatquestion',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chat_questions_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='dialogue',
            name='answered_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dialogue_answers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='dialogue',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dialogue_messages', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='next_chat',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.TGChat'),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='answer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answers_to', to='content.TGPost'),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='assigned',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions_for', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='resolved_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgnotification',
            name='sent_message',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='content.TGMessage'),
        ),
        migrations.RemoveIndex(
            model_name='tgpost',
            name='content_tgp_channel_27ba28_idx',
        ),
        migrations.AlterField(
            model_name='analysistemplate',
            name='adjust_fruits',
            field=models.CharField(blank=True, choices=[('NO', 'без дополнительных ограничений'), ('RESTRICT', 'ограничение фруктов'), ('EXCLUDE', 'замена фруктов')], max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='analysistemplate',
            name='display_mode',
            field=models.CharField(choices=[('default', 'Default'), ('success', 'Success'), ('info', 'Info'), ('primary', 'Primary'), ('warning', 'Warning'), ('danger', 'Danger')], default='default', max_length=50),
        ),
        migrations.AlterField(
            model_name='analysistemplate',
            name='is_visible',
            field=models.BooleanField(blank=True, default=True),
        ),
        migrations.AlterField(
            model_name='article',
            name='has_video',
            field=models.BooleanField(blank=True, default=False, verbose_name='Есть видео'),
        ),
        migrations.AlterField(
            model_name='article',
            name='is_public',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='article',
            name='is_published',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='article',
            name='text',
            field=markdownx.models.MarkdownxField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='basics',
            name='type',
            field=models.CharField(choices=[('TEXT', 'Текст'), ('IMAGE', 'Изображение')], default='TEXT', max_length=20),
        ),
        migrations.AlterField(
            model_name='chatquestion',
            name='answered_by',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chat_questions_replies_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='chatquestion',
            name='category',
            field=models.CharField(choices=[('GENERAL', '#вопрос'), ('IG', '#сменаника'), ('MEETING', '#вопросыкмитингу'), ('FEEDBACK', '#отзыв'), ('MEAL', '#рацион'), ('DOC', '#док')], max_length=50),
        ),
        migrations.AlterField(
            model_name='chatquestion',
            name='is_answered',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='dialogue',
            name='answered_by',
            field=models.ForeignKey(blank=True, limit_choices_to={'is_staff': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='dialogue_answers', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='dialogue',
            name='is_markdown',
            field=models.BooleanField(blank=True, default=True),
        ),
        migrations.AlterField(
            model_name='meeting',
            name='is_playable',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='meeting',
            name='is_uploaded',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='meeting',
            name='status',
            field=models.CharField(choices=[('PENDING', 'Pending'), ('UPLOADED', 'Uploaded'), ('PROCESSING', 'Processing'), ('READY', 'Ready for publication'), ('PUBLISHED', 'Published'), ('ERROR', 'Error')], default='PENDING', max_length=50),
        ),
        migrations.AlterField(
            model_name='meeting',
            name='type',
            field=models.CharField(choices=[('REGULAR', 'Большой митинг'), ('NEWBY', 'Новичковый митинг')], default='REGULAR', max_length=100),
        ),
        migrations.AlterField(
            model_name='meetingplayhistory',
            name='item',
            field=models.CharField(blank=True, default='playlist', max_length=255),
        ),
        migrations.AlterField(
            model_name='recipe',
            name='comment',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='chat_type',
            field=models.CharField(blank=True, choices=[('CHAT', 'Chat'), ('CHANNEL', 'Channel')], default='CHAT', max_length=20),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='is_active',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='is_main',
            field=models.BooleanField(blank=True, default=True),
        ),
        migrations.AlterField(
            model_name='tgchat',
            name='is_moderated',
            field=models.BooleanField(blank=True, default=True),
        ),
        migrations.AlterField(
            model_name='tgchatparticipant',
            name='status',
            field=models.CharField(blank=True, choices=[('ALLOWED', 'Allowed'), ('JOINED', 'Joined'), ('LEFT', 'Left'), ('RESTRICTED', 'Restricted'), ('UNRESTRICTED', 'Unrestricted'), ('BANNED', 'Banned')], default='ALLOWED', max_length=50),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='assigned',
            field=models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'ChannelAdmin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions_for', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='message_type',
            field=models.CharField(choices=[('QUESTION', 'Вопрос'), ('FEEDBACK', 'Отзыв'), ('MEAL', 'Рацион'), ('FORMULA', 'Формула')], max_length=100),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='resolved_by',
            field=models.ForeignKey(blank=True, limit_choices_to={'groups__name': 'ChannelAdmin'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgmessage',
            name='status',
            field=models.CharField(choices=[('NEW', 'Новый'), ('REJECTED', 'Отклонён'), ('CANCELED', 'Отменён'), ('ANSWERED', 'Отвечен'), ('POSTPONED', 'Отложен')], default='NEW', max_length=20),
        ),
        migrations.AlterField(
            model_name='tgnotification',
            name='error_message',
            field=models.TextField(blank=True, default='', null=True),
        ),
        migrations.AlterField(
            model_name='tgnotification',
            name='status',
            field=models.CharField(choices=[('PENDING', 'Pending'), ('SENT', 'Sent'), ('ERROR', 'Error')], default='PENDING', max_length=64),
        ),
        migrations.AlterField(
            model_name='tgnotificationtemplate',
            name='display_mode',
            field=models.CharField(choices=[('default', 'Default'), ('success', 'Success'), ('info', 'Info'), ('primary', 'Primary'), ('warning', 'Warning'), ('danger', 'Danger')], default='default', max_length=50),
        ),
        migrations.AlterField(
            model_name='tgnotificationtemplate',
            name='is_visible',
            field=models.BooleanField(blank=True, default=True),
        ),
        migrations.AlterField(
            model_name='tgpost',
            name='author',
            field=models.ForeignKey(limit_choices_to={'groups__name__startswith': 'ChannelAdmin'}, on_delete=django.db.models.deletion.CASCADE, related_name='posts_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='tgpost',
            name='is_global',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='tgpost',
            name='is_posted',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.AlterField(
            model_name='tgpost',
            name='is_private',
            field=models.BooleanField(blank=True, default=False),
        ),
        migrations.RemoveField(
            model_name='article',
            name='uid',
        ),
        migrations.AddField(
            model_name='article',
            name='uid',
            field=models.UUIDField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=migration_0077_article_uid__create_uuid,
        ),
        migrations.AlterField(
            model_name='article',
            name='uid',
            field=models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
        ),
    ]
